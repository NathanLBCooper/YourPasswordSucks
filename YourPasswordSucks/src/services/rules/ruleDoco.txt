https://hashcat.net/wiki/doku.php?id=rule_based_attack:

Implemented compatible functions

The following functions are 100% compatible to John the Ripper and PasswordsPro:

Name              ||Function||	Description                                        ||ExampleRule||Input Word||	Output Word     ||	Note
Nothing	          ||  :     ||  do Nothing                                         ||  :        || p@ssW0rd ||	p@ssW0rd        ||
Lowercase         ||  l     ||  Lowercase all letters                              ||  l        || p@ssW0rd ||	p@ssw0rd        ||
Uppercase         ||  u     ||  Uppercase all letters                              ||  u        || p@ssW0rd ||	P@SSW0RD        ||
Capitalize        ||  c     ||  Capitalize the first letter and lower the rest     ||  c        || p@ssW0rd ||	P@ssw0rd        ||
Invert Capitalize ||  C     ||  Lowercase first found character, uppercase the rest||  C        || p@ssW0rd ||	p@SSW0RD        ||
Toggle Case       ||  t     ||  Toggle the case of all characters in word.         ||  t        || p@ssW0rd ||	P@SSw0RD        ||
Toggle @          ||  TN    ||  Toggle the case of characters at position N        ||  T3       || p@ssW0rd ||	p@ssW0rd        || *
Reverse	          ||  r     ||  Reverse the entire word                            ||  r        || p@ssW0rd ||	dr0Wss@p        ||
Duplicate         ||  d     ||  Duplicate entire word                              ||  d        || p@ssW0rd ||	p@ssW0rdp@ssW0rd||
Duplicate N	      ||  pN    ||  Append duplicated word N times                     ||  p2       || p@ssW0rd ||	p@ssW0rdp@ssW0rdp@ssW0rd ||
Reflect	          ||  f     ||  Duplicate word reversed                            ||  f        || p@ssW0rd ||	p@ssW0rddr0Wss@p ||
Rotate Left	      ||  {     ||  Rotates the word left.                             ||  {        || p@ssW0rd ||	@ssW0rdp        ||
Rotate Right	  ||  }     ||  Rotates the word right                             ||  }        || p@ssW0rd ||	dp@ssW0r        ||
Append Character  ||  $X    ||  Append character X to end                          ||  $1       || p@ssW0rd ||	p@ssW0rd1       ||
Prepend Character ||  ^X    ||  Prepend character X to front                       ||  ^1       || p@ssW0rd ||	1p@ssW0rd       ||
Truncate left     ||  [     ||  Deletes first character                            ||  [        || p@ssW0rd ||	@ssW0rd         ||
Trucate right     ||  ]	    ||  Deletes last character                             ||  ]        || p@ssW0rd ||	p@assW0r        ||
Delete @ N        ||  DN    ||	Deletes character at position N                    ||  D3       || p@ssW0rd ||	p@sW0rd         || *
Extract range     ||  xNM   ||	Extracts M characters, starting at position N      ||  x04      || p@ssW0rd ||	p@ss            || * #
Omit range        ||  ONM   ||	Deletes M characters, starting at position N       ||  O12      || p@ssW0rd ||	psW0rd          || *
Insert @ N        ||  iNX   ||	Inserts character X at position N                  ||  i4!      || p@ssW0rd ||	p@ss!W0rd       || *
Overwrite @ N     ||  oNX   ||	Overwrites character at postion N with X           ||  o3$      || p@ssW0rd ||	p@s$W0rd        ||	*
Truncate @ N      ||  'N    ||	Truncate word at position N                        ||  '6       || p@ssW0rd ||	p@ssW0          ||
Replace	          ||  sXY   ||	Replace all instances of X with Y                  ||  ss$      || p@ssW0rd ||	p@$$W0rd        ||
Purge             ||  @X    ||	Purge all instances of X                           ||  @s       || p@ssW0rd ||	p@W0rd          || +
Duplicate first N ||  zN    ||	Duplicates first character N times                 ||  z2       || p@ssW0rd ||	ppp@ssW0rd      ||
Duplicate last N  ||  ZN    ||	Duplicates last character N times                  ||  Z2       || p@ssW0rd ||	p@ssW0rddd      ||
Duplicate all     ||  q     ||	Duplicate every character                          ||  q        || p@ssW0rd ||	pp@@ssssWW00rrdd ||
Extract memory    ||  XNMI  ||	Insert substring of length M starting from position||  lMX428   || p@ssW0rd ||	p@ssw0rdw0      || +
                                     N of word saved to memory at position I 
Append memory     ||  4     ||	Append the word saved to memory to current word	   ||  uMl4     || p@ssW0rd ||	p@ssw0rdP@SSW0RD ||	+
Prepend memory    ||  6     ||	Prepend the word saved to memory to current word   ||  rMr6     || p@ssW0rd ||	dr0Wss@pp@ssW0rd ||	+
Memorize          ||  M     ||	Memorize current word                              ||  lMuX084  || p@ssW0rd ||	P@SSp@ssw0rdW0RD ||	+
* Indicates that N starts at 0. For character positions other than 0-9 use A-Z (A=11)
+ Indicates that this rule is implemented in hashcat only.
# Changed in oclHashcat v1.37 → v1.38 and hashcat v0.51 → v0.52